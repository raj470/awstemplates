AWSTemplateFormatVersion: 2010-09-09
Resources:
  lambda2:
    Type: AWS::Lambda::Function
    Properties:
      # FunctionName: My_Function2
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import boto3
          from datetime import datetime

          def lambda_handler(event, context):
            ec2 = boto3.client('ec2')
            current_time = datetime.now().strftime("%H:%M")
            # Define the tag key and values
            tag_key  = 'Environment'
            tag_values = ['prod', 'dev', 'test']
            # Define start and stop times
            stop_time = "19:40"
            start_time = "19:48" 
            # Filter instances based on tags
            filters = [
              {
                'Name': 'tag:' + tag_key,
                'Values': tag_values
              }
            ]
            response = ec2.describe_instances(Filters=filters) 
            instance_ids = []
            for reservation in response['Reservations']:
              for instance in reservation['Instances']:
                instance_ids.append(instance['InstanceId'])
            if current_time == stop_time:
              # Stop the instances
              ec2.stop_instances(InstanceIds=instance_ids)
              print(f'Stopping instances: {instance_ids}')
            elif current_time == start_time:
            # Start the instances
            ec2.start_instances(InstanceIds=instance_ids)
            print(f'Starting instances: {instance_ids}')
            return {
              'statusCode': 200,
              'body': f'Successfully processed instances: {instance_ids}'
            }
      Role: !GetAtt LambdaFunctionExecutionRole.Arn
      FunctionName: instancetrigger
      Handler: lambda_function.lambda_handler
      LoggingConfig:
        ApplicationLogLevel: INFO
        LogFormat: JSON
        SystemLogLevel: INFO
      Timeout: 40
      # Environment:
      #   Variables:
          
      Runtime: python3.12
      PackageType: Zip
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ec2inst